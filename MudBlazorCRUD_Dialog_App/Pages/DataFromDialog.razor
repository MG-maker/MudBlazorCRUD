@page "/Dialog"

@using MudBlazorCRUD_Dialog_App.Data.Models
@inject MudBlazorCRUD_Dialog_App.Services.ICustomerService customerService
@inject MudBlazor.ISnackbar snackBar
@inject IDialogService DialogService


<MudButton OnClick="ShowDialog" Variant="Variant.Filled" Color="Color.Primary">
    Add Customer
</MudButton>

<MudTable Elevation="25" Dense="@dense" Items="GetCustomers()" Filter="new Func<Customer, bool>(Search)" MultiSelection="true" @bind-SelectedItems="selectedItems" FixedHeader="@fixed_header" Height="@(fixed_header?"400px":"")">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Customers</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Customers..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <HeaderContent>

        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Customer, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.FirstName)">FirstName</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.LastName)">LastName</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.Information.Age)">Age</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.Information.PhoneNumber)">PhoneNumber</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.Information.Email)">Email</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.Information.Social.Name)">Social</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.Work.Experience)">Experience</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.Work.Salary)">Salary</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.Company.Id)">Company ID</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.Company.Name)">Company Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.Company.Address)">Company Address</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x=>x.Company.Phone)">Company Phone</MudTableSortLabel></MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
        <MudTd DataLabel="LastName">@context.LastName</MudTd>
        <MudTd DataLabel="Age">@context.Information.Age</MudTd>
        <MudTd DataLabel="PhoneNumber">@context.Information.PhoneNumber</MudTd>
        <MudTd DataLabel="Email">@context.Information.Email</MudTd>
        <MudTd DataLabel="Social">@context.Information.Social.Name</MudTd>
        <MudTd DataLabel="Experience">@context.Work.Experience</MudTd>
        <MudTd DataLabel="Salary">@context.Work.Salary</MudTd>
        @* <MudTd DataLabel="CompanyID">@context.CompanyId</MudTd>*@
        <MudTd DataLabel="Company Id">@context.Company.Id</MudTd>
        <MudTd DataLabel="Company Name">@context.Company.Name</MudTd>
        <MudTd DataLabel="Company Address">@context.Company.Address</MudTd>
        <MudTd DataLabel="Company Phone">@context.Company.Phone</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] {3,5,10,25,50,100 }" />
    </PagerContent>
    <FooterContent>
        <MudTd colspan="13">Select All</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>DeleteAll())" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </FooterContent>
</MudTable>
<MudSwitch @bind-Checked="@fixed_header">Fixed Header</MudSwitch>
<MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
<br />
<MudText Inline="true">Selected items: @(selectedItems == null ? "" : string.Join(", ", selectedItems.OrderBy(x=>x.Id).Select(x=>x.Id)))</MudText>

@code{

    bool fixed_header = true;
    private bool dense = false;


    private string searchString = "";
    Customer customer = new Customer();

    private List<Customer> customers = new List<Customer>();
    private HashSet<Customer> selectedItems = new HashSet<Customer>();

    protected override void OnInitialized()
    {
        GetCustomers();
    }

    private List<Customer> GetCustomers()
    {
        customers = customerService.GetCustomers().ToList();
        return customers;
    }

    private bool Search(Customer customer)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (customer.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || customer.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
             || customer.Information.Age.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)
             || customer.Information.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || customer.Information.PhoneNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            )
        {
            return true;
        }
        return false;
    }

    async Task ShowDialog()
    {
        customer = new Customer();
        if (customer.Id == 0)
        {
            // open dialog and data transfer to Dialog.razor
            var dataForm = DialogService.Show<Dialog>("Create Customer");
            var result = await dataForm.Result;
            // return data from Dialog.razor
            if (!result.Cancelled)
            {
                customer = (Customer)result.Data;
                customerService.SaveCustomer(customer);
                snackBar.Add("Customer Saved.", Severity.Success);
            }
        }
    }

    async Task Edit(int id)
    {
        customer = customers.FirstOrDefault(c => c.Id == id);

        var parameters = new DialogParameters { ["customer"] = customer };
        // alternative
        //  var parameters = new DialogParameters ();
        //  parameters.Add("customer", customer);
        var dataForm = DialogService.Show<Dialog>("Update Customer", parameters);
        var result = await dataForm.Result;
        if (!result.Cancelled)
        {
            customer = (Customer)result.Data;
            customerService.UpdateCustomer(customer);
            snackBar.Add("Customer Updated.", Severity.Normal);
        }
    }

    private void Delete(int id)
    {
        customerService.DeleteCustomer(id);
        snackBar.Add("Customer Deleted.", Severity.Error);
    }

    private void DeleteAll()
    {
        if (selectedItems.Count > 1)
        {
            customers = selectedItems.ToList();
            customerService.DeleteAllCustomers(customers);
            snackBar.Add("All Companies Deleted.", Severity.Error);
        }
        selectedItems = null;
    }
}
